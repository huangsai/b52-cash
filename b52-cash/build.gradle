// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {

    apply from: file('gradle/dependencies.gradle')

    repositories {
        mavenCentral()
        gradlePluginPortal()
        google()

        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:7.0.0-alpha08"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.30"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
        classpath "com.vanniktech:gradle-maven-publish-plugin:${versions.mavenPublish}"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${versions.androidX.navigation}"
    }
}

allprojects { project ->

    repositories {
        mavenCentral()
        gradlePluginPortal()
        google()

        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://jitpack.io" }
        maven { url "http://10.17.4.29:8081/repository/maven-releases/" }
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                def group = details.requested.group
                def name = details.requested.name

                if (group == 'org.jetbrains.kotlin' && name.startsWith('kotlin-stdlib')) {
                    details.useVersion versions.kotlin
                } else if (group == 'org.jetbrains' && name.startsWith('annotations')) {
                    details.useVersion versions.jetAnnotation
                } else if (group == 'com.google.code.findbugs' && name.startsWith('jsr305')) {
                    details.useVersion versions.findBugsJrs305
                } else if (group == 'org.reactivestreams' && name.startsWith('reactive-streams')) {
                    details.useVersion versions.rxStream
                } else if (group == 'com.google.errorprone' && name.startsWith('error_prone_annotations')) {
                    details.useVersion versions.errorProne
                } else if (group == 'com.google.auto.value') {
                    details.useVersion versions.autoValue
                } else if (group == 'androidx.fragment') {
                    details.useVersion versions.androidX.fragment
                } else if (group == 'com.google.android.material') {
                    details.useVersion versions.androidX.material
                } else if (group == 'androidx.core' && name == 'core') {
                    details.useVersion versions.androidX.core
                } else if (group == 'androidx.collection' && name == 'collection') {
                    details.useVersion versions.androidX.collection
                } else if (group == 'androidx.customview') {
                    details.useVersion versions.androidX.customview
                } else if (group == 'androidx.arch.core') {
                    details.useVersion versions.androidX.arch
                } else if (group == 'androidx.annotation' && name == 'annotation') {
                    details.useVersion versions.androidX.annotation
                } else if (group.startsWith('androidx.compose')) {
                    details.useVersion versions.androidX.compose
                }
            }
        }
    }

    if (project.plugins.hasPlugin('kotlin-kapt')) {
        kapt {
            correctErrorTypes = true
            useBuildCache = true

            javacOptions {
                option("-Xmaxerrs", 1000)
            }
        }
    }
}

subprojects { project ->

    afterEvaluate {
        if (project.plugins.hasPlugin('android') || project.plugins.hasPlugin('android-library')) {
            android {
                compileSdkVersion buildConfig.compileSdk
                buildToolsVersion buildConfig.buildTools

                defaultConfig {
                    minSdkVersion buildConfig.minSdk
                    targetSdkVersion buildConfig.targetSdk
                    versionCode buildConfig.version.code
                    versionName buildConfig.version.name

                    multiDexEnabled true
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }

                buildFeatures {
                    viewBinding = true
                    compose true
                }

                compileOptions {
                    coreLibraryDesugaringEnabled true

                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }

                kotlinOptions {
                    jvmTarget = "1.8"
                    freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
                }

                composeOptions {
                    kotlinCompilerExtensionVersion versions.androidX.compose
                }

                lintOptions {
                    textReport true
                    abortOnError false
                    checkAllWarnings true
                    warningsAsErrors true
                    checkReleaseBuilds true
                    textOutput 'stdout'
                    warning 'UnusedResources'
                    lintConfig rootProject.file('lint.xml')
                }

                packagingOptions {
                    pickFirst 'lib/*/libc++_shared.so'

                    exclude 'META-INF/README'
                    exclude 'META-INF/README.txt'
                    exclude 'META-INF/readme'
                    exclude 'META-INF/readme.txt'

                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/license'
                    exclude 'META-INF/license.txt'

                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/notice'
                    exclude 'META-INF/notice.txt'

                    exclude 'META-INF/*.properties.txt'
                    exclude 'META-INF/*.DEPENDENCIES.txt'
                    exclude 'META-INF/dependencies'
                    exclude 'META-INF/dependencies.txt'
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/DEPENDENCIES.txt'

                    exclude 'META-INF/LGPL2.1'
                    exclude 'META-INF/ASL2.0'

                    exclude 'META-INF/proguard/**'
                    exclude 'META-INF/*.version'

                    exclude 'version.txt'
                    exclude 'androidsupportmultidexversion.txt'

                    exclude 'META-INF/atomicfu.kotlin_module'
                    exclude 'META-INF/common.kotlin_module'
                    exclude 'META-INF/android_debug.kotlin_module'
                    exclude 'META-INF/android_release.kotlin_module'
                    exclude 'META-INF/library_release.kotlin_module'
                    exclude 'META-INF/library_debug.kotlin_module'
                }
            }
        } else {

            java {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }

            compileKotlin {
                kotlinOptions {
                    jvmTarget = "1.8"
                    freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}